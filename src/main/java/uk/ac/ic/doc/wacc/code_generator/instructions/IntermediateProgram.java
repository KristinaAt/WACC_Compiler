package uk.ac.ic.doc.wacc.code_generator.instructions;import java.io.FileWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.UtilMethodLabel;/* A representation of the program created by Code Generator Visitor.   It generates intermediate instructions with message data, the main   instructions, any util methods used and user-defined functions. The program   representation must also define a printing function.*/public class IntermediateProgram implements Program {    /* Message data contains all the strings that will be defined at the     beginning of the assembly file */    private final List<IntermediateInstruction> messageData;    /* The list of instructions for the main method */    private final List<IntermediateInstruction> bodyInstructions;    /* The list of instructions for user defined functions */    private final List<IntermediateInstruction> userFunctions;    /* Util methods for default assembly library code such as reading an     integer etc. */    private final HashMap<UtilMethodLabel, String[]> utilMethods;    /* The architecture we will be translating the intermediate       representation to.*/    private final Architecture architecture;    public IntermediateProgram(Architecture architecture) {        messageData = new ArrayList<>();        bodyInstructions = new ArrayList<>();        userFunctions = new ArrayList<>();        utilMethods = new HashMap<>();        this.architecture = architecture;    }    public List<IntermediateInstruction> getMessageData() {        return messageData;    }    public List<IntermediateInstruction> getBodyInstructions() {        return bodyInstructions;    }    public List<IntermediateInstruction> getUserFunctions() {        return userFunctions;    }    public HashMap<UtilMethodLabel, String[]> getUtilMethods() {        return utilMethods;    }    public Architecture getArchitecture() {        return architecture;    }    public Program translate() {        Translator translator = getArchitecture().getTranslator();        Program program;        List<Instruction> userFunctions = new ArrayList<>();        List<Instruction> bodyFunctions = new ArrayList<>();        List<Instruction> messageData = new ArrayList<>();        Map<UtilMethodLabel, Instruction[]> utilMethods = new HashMap<>();        if (getArchitecture() == Architecture.ARM) {            program = new ARMProgram(messageData, bodyFunctions,                userFunctions, utilMethods);        } else {            program = new x86Program(messageData, bodyFunctions, userFunctions, utilMethods);        }        /* Process message data */        for (IntermediateInstruction instruction : getMessageData()) {            messageData.addAll(                Arrays.asList(translator.translateFrom(instruction)));        }        /* Process user functions */        for (IntermediateInstruction instruction : getUserFunctions()) {            userFunctions.addAll(Arrays.asList(translator.translateFrom(instruction)));        }        /* Process body functions */        for (IntermediateInstruction instruction : getBodyInstructions()) {            bodyFunctions.addAll(Arrays.asList(translator.translateFrom(instruction)));        }        /* Process util methods */        for (Entry<UtilMethodLabel, String[]> entry : getUtilMethods().entrySet()) {            utilMethods.put(entry.getKey(), translator.getCode(entry.getKey(),                entry.getValue()));        }        return program;    }    @Override    public void writeToFile(FileWriter file) {        throw new UnsupportedOperationException("Not supported for "            + "intermediate programs");    }}