package uk.ac.ic.doc.wacc.code_generator.instructions.utils.list_methods;import uk.ac.ic.doc.wacc.code_generator.instructions.basics.BranchInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.basics.Label;import uk.ac.ic.doc.wacc.code_generator.instructions.expression_instructions.ADDInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.expression_instructions.CMPInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.expression_instructions.SUBInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.ElementSize;import uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.LDRInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.POPInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.PUSHInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.operands.ConstantOffset;import uk.ac.ic.doc.wacc.code_generator.instructions.operands.OffsetRegister;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.AbstractUtilMethod;import static uk.ac.ic.doc.wacc.code_generator.instructions.basics.BranchInstruction.Branch.BL;import static uk.ac.ic.doc.wacc.code_generator.instructions.basics.BranchInstruction.Branch.BNE;import static uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.ElementSize.WORD;import static uk.ac.ic.doc.wacc.code_generator.instructions.operands.Register.Identifier.*;import static uk.ac.ic.doc.wacc.code_generator.instructions.utils.UtilMethodLabel.p_get_list_element;public class GetListElementNode extends AbstractUtilMethod {    public GetListElementNode(Label firstLabel, Label secondLabel) {        super();        this.instructions.add(new Label(p_get_list_element.toString()));        this.instructions.add(new PUSHInstruction(LR.getRegister()));        this.instructions.add(ADDInstruction.addWithNoFlags(r1.getRegister(),                r1.getRegister(), new ConstantOffset(1)));        this.instructions.add(new BranchInstruction(BL, secondLabel));        this.instructions.add(firstLabel);        this.instructions.add(new LDRInstruction(r0.getRegister(),                OffsetRegister.preIndexedOffset(r0.getRegister(),                        new ConstantOffset(4)), WORD));        this.instructions.add(SUBInstruction.subWithNoFlags(r1.getRegister(),                r1.getRegister(), new ConstantOffset(1)));        this.instructions.add(secondLabel);        this.instructions.add(new CMPInstruction(r1.getRegister(),                new ConstantOffset(0)));        this.instructions.add(new BranchInstruction(BNE, firstLabel));        this.instructions.add(new POPInstruction(PC.getRegister()));    }}