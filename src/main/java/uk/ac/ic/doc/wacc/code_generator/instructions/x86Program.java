package uk.ac.ic.doc.wacc.code_generator.instructions;import java.io.FileWriter;import java.io.IOException;import java.util.List;import java.util.Map;import uk.ac.ic.doc.wacc.code_generator.instructions.basics.Label;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.UtilMethodLabel;public class x86Program implements Program {    private final List<Instruction> messageData;    private final List<Instruction> bodyInstructions;    private final List<Instruction> userFunctions;    private final Map<UtilMethodLabel, Instruction[]> utilMethods;    public x86Program(List<Instruction> messageData,        List<Instruction> bodyInstructions,        List<Instruction> userFunctions, Map<UtilMethodLabel,                Instruction[]> utilMethods) {        this.messageData = messageData;        this.bodyInstructions = bodyInstructions;        this.userFunctions = userFunctions;        this.utilMethods = utilMethods;    }    public List<Instruction> getMessageData() {        return messageData;    }    public List<Instruction> getBodyInstructions() {        return bodyInstructions;    }    public List<Instruction> getUserFunctions() {        return userFunctions;    }    public Map<UtilMethodLabel, Instruction[]> getUtilMethods() {        return utilMethods;    }    @Override    public void writeToFile(FileWriter file) throws IOException {        file.write(".intel_syntax noprefix\n");        file.write(".section .rodata\n");        /* Write .data in assembly if string data is present */        if(messageData.size() > 0) {            file.write(".data\n\n");        }        /* Write all string data to assembly file */        for(Instruction string : messageData) {            file.write(string.toString() + "\n");        }        file.write(".text\n\n");        /* Write all functions assembly to assembly file */        for (Instruction instruction : userFunctions) {            if(!(instruction instanceof Label)) {                file.write("\t");            }            file.write(instruction.toString() + "\n");        }        /* Add all instructions and util methods to assembly file */        for(Instruction instruction : bodyInstructions) {            if(!(instruction instanceof Label)) {                file.write("\t");            }            file.write(instruction.toString() + "\n");        }        for(Instruction[] printMethod : utilMethods.values()) {            for (Instruction instruction : printMethod) {                if(!(instruction instanceof Label)) {                    file.write("\t");                }                file.write(instruction.toString() + "\n");            }        }    }}