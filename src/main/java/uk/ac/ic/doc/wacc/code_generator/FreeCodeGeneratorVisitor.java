package uk.ac.ic.doc.wacc.code_generator;import uk.ac.ic.doc.wacc.ast.ASTBaseVisitor;import uk.ac.ic.doc.wacc.ast.ASTNodes;import uk.ac.ic.doc.wacc.ast.ASTNodes.IdentifierNode;import uk.ac.ic.doc.wacc.code_generator.instructions.IntermediateInstruction;import uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.intermediate.Move;import uk.ac.ic.doc.wacc.code_generator.instructions.memory_instructions.intermediate.Move.Condition;import uk.ac.ic.doc.wacc.code_generator.instructions.operands.intermediate.MemoryAtRegister;import uk.ac.ic.doc.wacc.code_generator.instructions.operands.intermediate.Register;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.UtilMethodLabel;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.intermediate.free_methods.FreeArray;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.intermediate.free_methods.FreePair;import uk.ac.ic.doc.wacc.code_generator.instructions.utils.intermediate.list_methods.FreeList;import uk.ac.ic.doc.wacc.semantic_analyser.VariableDeclaration;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import static uk.ac.ic.doc.wacc.code_generator.CodeGeneratorVisitor.WORD;import static uk.ac.ic.doc.wacc.code_generator.instructions.utils.UtilMethodLabel.*;public class FreeCodeGeneratorVisitor        extends ASTBaseVisitor<List<IntermediateInstruction>> {    private final List<Register> usableRegisters;    private final HashMap<UtilMethodLabel, String[]> utilMethods;    private final List<IntermediateInstruction> messageData;    private final CodeGeneratorVisitor codeGeneratorVisitor;    private final int stackSize;    private final boolean optimise;    private Register addressRegister;    public FreeCodeGeneratorVisitor(            List<Register> usableRegisters,            HashMap<UtilMethodLabel, String[]> utilMethods,            List<IntermediateInstruction> messageData,            CodeGeneratorVisitor codeGeneratorVisitor,            int stackSize, boolean optimise) {        this.usableRegisters = usableRegisters;        this.utilMethods = utilMethods;        this.messageData = messageData;        this.codeGeneratorVisitor = codeGeneratorVisitor;        this.stackSize = stackSize;        this.optimise = optimise;    }    @Override    public    List<IntermediateInstruction> visitIdentifierNode(IdentifierNode node) {        List<IntermediateInstruction> instructions = new ArrayList<>();        Register firstRegister = usableRegisters.get(0);        VariableDeclaration varDeclaration =                node.getVariableDeclaration();        /* Load variable and place into register r0 ready to free the           address */        instructions.addAll(CodeGeneratorVisitor.loadVariable(firstRegister,                varDeclaration, WORD, stackSize, optimise));        addressRegister = firstRegister;        instructions.addAll(varDeclaration.getType().visit(this));        return instructions;    }    @Override    public    List<IntermediateInstruction>    visitArrayElement(ASTNodes.ArrayElement node) {        List<IntermediateInstruction> instructions = new ArrayList<>();        Register firstRegister = usableRegisters.get(0);        /* Dereference the array element and get the address stored there */        instructions.addAll(codeGeneratorVisitor.dereferenceArray(node));        instructions.add(new Move(new MemoryAtRegister(firstRegister, 0,            false), firstRegister, Condition.NONE, WORD));        /* Load variable and place into register r0 ready to free the           address */        instructions.add(new FreeArray(firstRegister));        CodeGeneratorVisitor.addRuntimeErrorMethod(utilMethods, messageData,                p_free_array);        return instructions;    }    @Override    public    List<IntermediateInstruction> visitArrayType(ASTNodes.ArrayType node) {        List<IntermediateInstruction> instructions = new ArrayList<>();        /* Frees an array by branching to the p_free_array util method */        instructions.add(new FreeArray(addressRegister));        CodeGeneratorVisitor.addRuntimeErrorMethod(utilMethods, messageData,                p_free_array);        return instructions;    }    @Override    public    List<IntermediateInstruction> visitPairType(ASTNodes.PairType node) {        List<IntermediateInstruction> instructions = new ArrayList<>();        /* Frees a pair by branching to the p_free_pair util method */        instructions.add(new FreePair(addressRegister));        CodeGeneratorVisitor.addRuntimeErrorMethod(utilMethods, messageData,                p_free_pair);        return instructions;    }    @Override    public    List<IntermediateInstruction> visitListType(ASTNodes.ListType node) {        List<IntermediateInstruction> instructions = new ArrayList<>();        /* Frees a list by branching to the p_free_list util method */        instructions.add(new FreeList(addressRegister));        CodeGeneratorVisitor.addRuntimeErrorMethod(utilMethods, messageData,                p_free_list);        return instructions;    }}